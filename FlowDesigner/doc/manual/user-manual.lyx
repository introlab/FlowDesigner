#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass mwbk
\begin_preamble
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{lscape}
\end_preamble
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 2
\paperpagestyle headings

\layout Title

FlowDesigner User's Manual
\layout Author

Jean-Marc Valin
\newline 
Dominic Létourneau
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Standard


\begin_inset FloatList figure

\end_inset 


\layout Chapter

Introduction
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
href{http://flowdesigner.sourceforge.net/}{FlowDesigner}
\end_inset 

 is a free (GPL/LGPL) 
\begin_inset Quotes eld
\end_inset 

data-flow oriented
\begin_inset Quotes erd
\end_inset 

 development environment.
 It can be used to build complex applications by combining small, reusable
 building blocks.
 In some way, it has similarities with 
\emph on 
Simulink
\emph default 
 and 
\emph on 
LabView
\emph default 
, although it is not designed (and far) to be a "clone" of any of them.
\layout Standard

FlowDesigner features a GUI that allows rapid application development and
 includes a visual debugger.
 Although FlowDesigner can be seen as a rapid prototyping tool, it can also
 be used for building real-time applications, such as audio effects processing.
 Since FlowDesigner is not really an 
\begin_inset Quotes eld
\end_inset 

interpreted language
\begin_inset Quotes erd
\end_inset 

, it can be quite fast.
 
\layout Standard

It is written in C++ and features a plug-in mechanism that allows new nodes/tool
boxes to be easily added.
 FlowDesigner currently includes the following toolboxes: 
\layout Itemize

Signal processing
\layout Itemize

Speech processing (GMMs)
\layout Itemize

Vector quantization (VQ)
\layout Itemize

Neural network (MLP)
\layout Itemize

Fuzzy logic
\layout Itemize

Real-time audio effect processing (alpha stage)
\layout Itemize

Linear algebra using LAPACK/BLAS/ATLAS (alpha stage)
\layout Itemize

Image processing (early stage)
\layout Itemize

Robotics
\begin_inset Foot
collapsed false

\layout Standard

http://robotflow.sourceforge.net
\end_inset 


\layout Section

The Idea Behind FlowDesigner
\layout Standard

FlowDesigner was designed with the following goals in mind:
\layout Itemize

Ease of use
\layout Itemize

Speed
\layout Itemize

Flexibility
\layout Itemize

Extendibility
\layout Itemize

Modularity
\layout Standard

One thing to note with respect to speed is that we tried the same approach
 as for the C++ language which can be summarized by 
\begin_inset Quotes eld
\end_inset 

you don't pay for the features you don't use
\begin_inset Quotes erd
\end_inset 

.
 
\layout Section

Terminology
\layout Standard

This section defines the concepts and terms used by FlowDesigner and shows
 how they relate to C or Matlab constructs.
\layout Subsection

Nodes
\layout Standard

The basic processing using in FlowDesigner is a Node, a Node is in all ways
 similar to a C or Matlab function.
 It takes some input data, performs some operations and send data out.
 
\layout Subsubsection

Built-in nodes
\layout Standard

A built-in FlowDesigner node is written in C++ and is part of the FlowDesigner
 code (or compiled in an FlowDesigner toolbox, like Matlab's .mex files).
 In FlowDesigner, all nodes are implemented as a class that derive (directly
 or indirectly) from a base class called "Node" (note that most nodes derive
 from "BufferedNode", which enable automatic handling of output buffers).
 Although the FlowDesigner implementation of different nodes uses C++ inheritanc
e mechanism (using classes), there's no reason for the user to be aware
 of that.
 For that reason, it's not recommended to refer to nodes as "types" or 
\begin_inset Quotes eld
\end_inset 

classes
\begin_inset Quotes erd
\end_inset 

 (e.g.
 if FlowDesigner were written in C, nodes would be implemented as functions).
 
\layout Subsubsection

Sub-networks (composite nodes)
\layout Standard

A FlowDesigner sub-network (or subnet) is a collection of connected nodes
 that can be used as if they were a single node.
 Most FlowDesigner subnets will be saved into .n files, which are almost
 the exact equivalent of Matlab's .m files.
 There's no real C equivalent because C is a compiled language (although
 it could be seen as a C function calling other C function).
 
\layout Subsubsection

Node terminals (inputs/outputs)
\layout Standard

The inputs of a FlowDesigner nodes are equivalent to the arguments to a
 Matlab/C function.
 The same for outputs, but while C is restricted to one return value, FlowDesign
er and Matlab can have several outputs.
 Node inputs and outputs are sometimes referred to as 
\begin_inset Quotes eld
\end_inset 

terminals
\begin_inset Quotes erd
\end_inset 

.
\layout Subsubsection

Node parameters
\layout Standard

FlowDesigner node parameters are also equivalent to C/Matlab function arguments.
 The difference between node parameters and node inputs is that parameters
 cannot change at run-time.
 They are specified at "build-time" and stay constant throughout the execution
 of the program.
 For instance, the "Constant" node has no input, but has a parameter called
 "VALUE" that is returned as the output of the node.
 Using constants, you can always "transform" another node's input into a
 parameter (to the constant).
 The reverse is not true, however.
 Why then have parameters and not define every argument as an input? Mostly
 simplicity and run-time performance.
 Sometimes, it is just a lot easier to know certain arguments in advance
 and be sure that they don't change during the run.
 However, when possible, it is better to implement arguments as inputs,
 as this allows more flexibility and can change during execution.
\layout Subsection

Links
\layout Standard

There's no real correspondence between FlowDesigner links and C or Matlab
 constructs.
 The best analogy would be to say that Links represent the order of the
 lines in a C/Matlab function.
 You also need to keep in mind that FlowDesigner uses a "pull method" in
 order to compute data.
 What does that mean? When you run a network, the last node (output node)
 of the main network (called "MAIN" -- how original!) is asked for its output.
 In order to compute its output, it needs to ask its input nodes for their
 output.
 That way everything propagates from the end to the beginning recursively.
 
\layout Standard

Now, why going backwards like that? The answer involves faster handling
 of dependencies, faster processing, buffer management and things like that.
\layout Subsection

Data Types
\layout Standard

Unlike Matlab, that only supports the complex-double-matrix type (well,
 that's not totally true, but...), FlowDesigner (like C and C++) has support
 for many different types.
 The 
\begin_inset Quotes eld
\end_inset 

basic
\begin_inset Quotes erd
\end_inset 

 FlowDesigner types are: Bool, Int, Float, Stream, String and Vector.
 There are also toolbox-specific types, like FFNet (neural network), VQ
 (Vector Quantizer), GMM (Gaussian Mixture Model), etc.
\layout Standard

Right now, the only way to define a new type in FlowDesigner is by adding
 C++ code for it in a toolbox (or the core).
 Eventually, there will be a way to pack data in a "struct" using FlowDesigner
 nodes, but this feature is still in the testing phase.
 
\layout Standard

Some FlowDesigner Nodes expect a certain type of data as input/parameter
 and will generate a run-time exception (which will abort execution) if
 the wrong data type is used (e.g..
 a Load node expects a Stream as input and nothing else).
 Some nodes, like the NOP (no-op) node, can take any type as input.
 Some node have more complex behavior, like the Add node that can add two
 floats, two Vectors of the same dimension, but cannot add a Bool and a
 Vector.
 
\layout Chapter

Standard Data Types and Operators
\layout Standard

FlowDesigner supports multiple data types and multiple binary (two-operands)
 operators that are related in some ways.
 Standard FlowDesigner types are shown in Table 
\begin_inset LatexCommand \ref{cap:FlowDesigner-Basic-Data}

\end_inset 

.
 Specific toolbox data types are not described in this chapter.
 Please refer to Chapter (XYZ) for more information.
\layout Standard
\align center 

\begin_inset Float table
wide false
collapsed false

\layout Caption

FlowDesigner Basic Data Types
\begin_inset LatexCommand \label{cap:FlowDesigner-Basic-Data}

\end_inset 


\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="22" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Type
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Description
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bool
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

bool C type wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

int C type wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

float C type wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

double C type wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

std::complex<float> wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

std::complex<double> wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

String
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

std::string wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<bool>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

std:vector<bool> wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

std::vector<int> wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

std::vector<float> wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

std::vector<double> wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

std::vector<complex<float> > wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

std::vector<std::complex<double>> wrapper
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<bool>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<bool> class
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<int> class
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float> class
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double> class
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<std::complex<float> > class
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<std::complex<double> > class
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

std::vector<ObjectRef> wrapper
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<ObjectRef> class 
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Section

Operators Compatibility (Add,Sub,Mul,Div,Concat,Min,Max)
\layout Standard

Table 
\begin_inset LatexCommand \ref{cap:Add-Operator-Compatible}

\end_inset 

 summarizes types that are compatible with the Add operator.
 The Add operator is applied by doing : operand 1 + operand 2 = result.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{landscape}
\layout Standard

\layout Standard

\end_inset 


\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Caption

Add Operator Compatible Types 
\begin_inset LatexCommand \label{cap:Add-Operator-Compatible}

\end_inset 


\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
scriptsize
\end_inset 


\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="37" columns="6">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Operand (1 ->)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<Double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<Double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Operand (1 ->)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double> >
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<fload>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Standard


\begin_inset Float table
wide false
collapsed true

\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
scriptsize
\end_inset 


\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="18" columns="6">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Operand (1 ->)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double> >
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<fload>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double>>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
scriptsize
\end_inset 


\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="18" columns="8">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true" newpage="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Operand (1 ->)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<ObjectRef>
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Int
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Float
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Double
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complex<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<int>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<float>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<double>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<float>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double> >
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<complex<double>>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Vector<ObjectRef>
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

X
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<ObjectRef>
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Matrix<ObjectRef>
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
end{landscape}
\end_inset 


\layout Section

VectorGetIndex
\layout Section

VectorSetIndex
\layout Section

MatrixGetIndex
\layout Section

MatrixSetIndex
\layout Section

Data Type Serialization Format
\layout Section

Data Type Automatic Conversion
\layout Chapter

Getting Started with 
\emph on 
flowdesigner
\layout Standard

If called with no argument, the 
\emph on 
flowdesigner
\emph default 
 program will start with a new empty FlowDesigner document (fig.
 
\begin_inset LatexCommand \ref{fig:vflow_main}

\end_inset 

).
 It will already have a network named "MAIN".
 It is important that every "program" contain a network called "MAIN", which
 is equivalent to the 
\emph on 
main()
\emph default 
 function in a C program.
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename vflow.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

flowdesigner main window
\begin_inset LatexCommand \label{fig:vflow_main}

\end_inset 


\end_inset 


\layout Section

Basic GUI Controls
\layout Standard

You can then add nodes to your network by clicking on the right button in
 the background, select 
\emph on 
New Node
\emph default 
 and the type of node you want.
 The node inputs are displayed as dots on the left side of each node, while
 the outputs are displayed on the right side.
 Inputs and outputs are called terminals.
 You can connect two nodes by clicking on a terminal and dragging the mouse
 to another terminal.
 Note that you cannot connect two outputs together, nor can you connect
 two inputs together.
 Except by using the 
\emph on 
Feedback
\emph default 
 node (see the "advanced" features section), you should not have feedback
 loops in your network.
 Links can be deleted by clicking on them with the SHIFT modifier on.
 
\layout Standard

Right-clicking on a node brings up the node menu.
 Selecting "Properties" in the node menu brings a dialog with parameters
 used by the node.
 Each parameter has a name a type and a value.
 Some of the parameters are mandatory, while some others are optional.
 See the node documentation for a description of all the parameters.
 
\layout Standard

All networks must have at least one output.
 Any network that is not a top-level network (MAIN) may also have inputs.
 Inputs and outputs names are added by left clicking on a terminal with
 the SHIFT modifier on.
 You will be asked to provide the input/output name.
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="7" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="block" valignment="center" leftline="true" rightline="true" width="2.4in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

GUI Controls
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard
\align center 
Actions to do
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Add nodes to the network
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Right-click on the background and select 
\emph on 
New Node 
\emph default 
to add the node you want.
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Connect two nodes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Click on the terminal and drag the mouse the other terminal.
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Delete links between nodes
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Click on the link with the SHIFT modifier on.
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Set a node parameters
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Double-click on the node OR right-click on it and select 
\emph on 
Properties
\emph default 
.
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Add output/input name to a node
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Click on the terminal with the SHIFT modifier on.
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Get information about the node
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Middle-click on it
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard
\align center 

\series bold 
Basic GUI Controls
\layout Section

Using Sub-networks (subnets), Iterators and Threaded Iterators
\layout Subsection

Sub-Networks
\layout Standard

As mentionned earlier, every "program" contain a network called "MAIN",
 which is equivalent to the 
\emph on 
main()
\emph default 
 function in a C program.
 However, you can add more sub-networks (equivalent of sub-routines) from
 the main menu 
\emph on 
(Networks->Add Network
\emph default 
) that can contain several nodes connected together.
 That way, You simplify programming and you can reuse those networks as
 subnets in a higher level network.
 It is very important to name the newly created network a different name
 than "MAIN" for obvious reasons.
 Those networks must absolutely have "named" inputs and outputs in order
 to be used in higher level networks as explained in the previous section.
 To add sub-networks into a network of higher level, right-click on the
 background and select the sub-network you want to add from the menu (New
 Node-> Subnet
\emph on 
).
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_main.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

Including a subnet with FlowDesigner 
\begin_inset LatexCommand \label{cap:sample_main}

\end_inset 


\end_inset 


\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_subnet.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

Subnet with FlowDesigner
\begin_inset LatexCommand \label{cap:sample_subnet}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/subnet.n .
\layout Subsection

Iterators
\layout Standard

Another useful type of network you can create is the Iterator 
\emph on 
(main menu Network->Add iterator)
\emph default 
.
 An iterator, is a control structure that performs a loop.
 It stops looping when a certain "control condition" is met.
 The condition is a boolean value the iterator gets from a node.
 To define the iterator's condition, left click on a node output while holding
 the CONTROL (or ALT) modifier.
 Note that there is a bug in some versions of gnome for which CONTROL does
 not work with the canvas, so you'll have to use ALT.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_main3.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

Including an iterator with FlowDesigner
\begin_inset LatexCommand \label{cap:sample_main3}

\end_inset 


\end_inset 


\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_iterator2.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

Iterator with FlowDesigner
\begin_inset LatexCommand \label{cap:sample_iterator2}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/demo_feedback.n .
\layout Subsection

Threaded Iterators
\layout Standard

For now, Threaded Iterators are experimental.
 They are a special kind of subnets that provide a different level of multi-thre
ading.
 You should not use them, unless you REALLY know what you are doing.
\layout Section

Executing a FlowDesigner Program
\layout Standard

When your program is complete, you can execute it by clicking "Run" in the
 toolbar.
 If an error occurs, the program will abort and the error will be printed
 in the text box in the bottom pane.
 Node that as of 0.6.0, the created documents have execute permission and
 can be executed as a like a script, provided that the batchflow executable
 is in the path.
\layout Chapter

Using nodes
\layout Standard

This section presents different FlowDesigner nodes categories.
 The nodes categories are divided in two by level of diffiuclty: the 
\emph on 
Basic Nodes
\emph default 
 and the 
\emph on 
Advanced Features
\emph default 
.
 For every category (no matter its level of difficulty), at least one of
 his node is explained and given in example.
 For every example, you can find the corresponding program in the directorie:
 
\emph on 
FreeSpeech/examples
\emph default 
 .
\layout Section

Basics nodes
\layout Standard

Lets get started with the nodes that are the most popular for new users,
 that is, the most important to understand.
\layout Subsection

Category: General
\layout Standard

As the name mentions, this category contains nodes that you find frequently
 in programs.
\layout Subsubsection

Constant
\layout Standard

Among the nodes of this category, the most often used is certainly the node
 
\begin_inset Quotes eld
\end_inset 

Constant
\begin_inset Quotes erd
\end_inset 

.
 Figure 
\begin_inset LatexCommand \ref{cap:sample_hello}

\end_inset 

 shows how you can make FlowDesigner write 
\begin_inset Quotes eld
\end_inset 

Hello World!
\begin_inset Quotes erd
\end_inset 

 in the status window.
 Yes, it's simply a constant string (using 
\emph on 
Constant
\emph default 
 node) with an output label attached to it.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_hello.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

Hello World!
\begin_inset LatexCommand \label{cap:sample_hello}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/hello.n .
\layout Standard

In the previous example, the node 
\begin_inset Quotes eld
\end_inset 

Constant
\begin_inset Quotes erd
\end_inset 

 took the data type 
\begin_inset Quotes eld
\end_inset 

string
\begin_inset Quotes erd
\end_inset 

, however, the node can take other data types.
 Here is a list of all data types that a node 
\begin_inset Quotes eld
\end_inset 

Constant
\begin_inset Quotes erd
\end_inset 

can take:
\layout List
\labelwidthstring 00.00.0000

int: This data type has a representation that can take the value of -2 147
 483 648 to 2 147 483 647.
\layout List
\labelwidthstring 00.00.0000

float: Floats have the same size as 
\begin_inset Quotes eld
\end_inset 

int
\begin_inset Quotes erd
\end_inset 

, but are read as floating point numbers.
 They range from the value -1.4013e-45 to 1.4013e-45 and from -3.4e38 to 3.4e38.
\layout List
\labelwidthstring 00.00.0000

bool: Object that can take the values: 
\begin_inset Quotes eld
\end_inset 

true
\begin_inset Quotes erd
\end_inset 

 or 
\begin_inset Quotes eld
\end_inset 

false
\begin_inset Quotes erd
\end_inset 

.
 This data type is often used for condition input.
 For example, in a node IF, the input 
\begin_inset Quotes eld
\end_inset 

COND
\begin_inset Quotes erd
\end_inset 

 is set by a constant of type bool.
 When the constant is 
\begin_inset Quotes eld
\end_inset 

true
\begin_inset Quotes erd
\end_inset 

, the input THEN is pulled and when the constant is 
\begin_inset Quotes eld
\end_inset 

false
\begin_inset Quotes erd
\end_inset 

, the input ELSE is pulled.
\layout List
\labelwidthstring 00.00.0000

object: An object is a data type defined by developpers.
 However, you can create an exiting object by typing its corresponding command.
 For instance, you can create a string 
\begin_inset Quotes eld
\end_inset 

hello world
\begin_inset Quotes erd
\end_inset 

 by typing 
\begin_inset Quotes eld
\end_inset 

<String hello world>
\begin_inset Quotes erd
\end_inset 

 ( 
\begin_inset Quotes eld
\end_inset 

<Vector 1 2 3 4 5 6 7 8>
\begin_inset Quotes erd
\end_inset 

 , 
\begin_inset Quotes eld
\end_inset 

<Int 23>
\begin_inset Quotes erd
\end_inset 

 and  
\begin_inset Quotes eld
\end_inset 

<Float 23.67>
\begin_inset Quotes erd
\end_inset 

 are some other examples ).
\layout List
\labelwidthstring 00.00.0000

string: Strings are series of characters ('a'-'z', '0'-'9','A'-'Z', or some
 other symbol)
\layout List
\labelwidthstring 00.00.0000

subnet_param: Subnet_param set parameter's name of higher level.
 For example, create a network SUBNET0 in a file.
 In SUBNET0 add and set a subnet_param to 
\begin_inset Quotes eld
\end_inset 

hello
\begin_inset Quotes erd
\end_inset 

.
 Add the node SUBNET0 to the main network and double-click on it.
 Then, you will see in the tab 
\begin_inset Quotes eld
\end_inset 

Parameters
\begin_inset Quotes erd
\end_inset 

 a parameter to set named 
\begin_inset Quotes eld
\end_inset 

hello
\begin_inset Quotes erd
\end_inset 

.
\layout Subsection

Category: IO
\layout Standard

This category concerns mainly the use of streams for reading, loading and
 saving data of any kind.
\layout Subsubsection

Save
\layout Standard

This example is used to save an object in a file or a network stream.
 Figure 
\begin_inset LatexCommand \ref{cap:sample_IO}

\end_inset 

 shows that the nod
\emph on 
 Save
\emph default 
 takes two inputs: an object to save and an FlowDesigner write stream where
 to save the object.
 The write stream is opened using the 
\emph on 
OutputStream
\emph default 
 node which takes a file name as input (allo.sdw).
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_IO.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

I/O with FlowDesigner
\begin_inset LatexCommand \label{cap:sample_IO}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/save.n .
\layout Subsection

Category: Logic
\layout Standard

This categroy contains nodes that proceed logical operations such as: AND,
 OR, NOT, IF etc...
 
\layout Subsubsection

IF
\layout Standard

On of the most important control structure in a language is conditional
 branching.
 Figure 
\begin_inset LatexCommand \ref{cap:sample_if}

\end_inset 

 shows an 
\emph on 
IF
\emph default 
 statement in FlowDesigner.
 The node
\emph on 
 IF
\emph default 
 pulls his input from the terminal 
\emph on 
then
\emph default 
 or 
\emph on 
else
\emph default 
 depending on whether the condition is true or false.
 When the condition is true, it pulls the terminal 
\emph on 
then
\emph default 
 and when the condition is false, it pulls the terminal 
\emph on 
else
\emph default 
.
 In both cases, the terminal pulled is returned as the output of the 
\emph on 
IF
\emph default 
.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_if.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

If/then/else with FlowDesigner
\begin_inset LatexCommand \label{cap:sample_if}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/demo_if.n .
\layout Subsection

Category: Operator
\layout Standard

This categroy contains nodes that proceed arithmetic operations such as:
 ADD, DIV, EQUAL, MIN, etc...
 
\layout Subsubsection

MIN
\layout Standard

Figure 
\begin_inset LatexCommand \ref{cap:overflow_min}

\end_inset 

 shows a 
\emph on 
MIN
\emph default 
 statement in FlowDesigner.
 The node
\emph on 
 MIN
\emph default 
 compares its two inputs and return the minimum between the two values.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_min.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

Min with FlowDesigner
\begin_inset LatexCommand \label{cap:overflow_min}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/min.n .
\layout Subsection

Category: Probes
\layout Standard

This categroy contains nodes that proceeds data plotting and printing.
 It also helps for debugging by allowing to 
\begin_inset Quotes eld
\end_inset 

trace
\begin_inset Quotes erd
\end_inset 

 programs initializations, requests, inputs and exceptions.
\layout Subsubsection

textProbe
\layout Standard

Figure 
\begin_inset LatexCommand \ref{cap:overflow_textProbe}

\end_inset 

 shows an FlowDesigner program that uses 
\emph on 
textProbe
\emph default 
.
 That way, 
\emph on 
textProbe
\emph default 
 shows the program results as text in a box.
 In iterators, textProbe allows to show the program result for every new
 iteration by clicking on the icon 
\emph on 
Next
\emph default 
.
 
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_textProbe.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

textProbe with FlowDesigner
\begin_inset LatexCommand \label{cap:overflow_textProbe}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/textProbe.n .
\layout Subsection

Category: Vector
\layout Standard

This categroy contains nodes that proceed operations on vectors such as:
 SUM, CONCATENATE, LENGTH, DCVECTOR, etc...
 
\layout Subsubsection

DCVector and SUM
\layout Standard

Figure 
\begin_inset LatexCommand \ref{cap:overflow_vector}

\end_inset 

 shows a FlowDesigner program that creates a vector and make the summation
 of all its objects.
 For creating a 
\emph on 
DCVector 
\emph default 
you must specify the number of objects you want it to contain (the length)
 and the value you want all the objects to take (the value).
 The node 
\emph on 
SUM, 
\emph default 
add all of the objects given by the vector at his input and return the result.

\emph on 
 
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_vector.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

Using a vector with FlowDesigner
\begin_inset LatexCommand \label{cap:overflow_vector}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/vector.n .
\layout Section

Advanced features
\layout Standard

The following categories of nodes presented are more complex than the others
 and not necesserely useful for every user.
 That's the reason why they are placed in this section.
\layout Subsection

Category: DSP
\layout Standard

This category was created for Speech recognition and voice treatment.
 
\layout Subsection

Category: Flow
\layout Subsubsection

Feed-back Loops
\layout Standard

In some circumstances, it is desirable to insert feed-back loops into a
 program.
 Normally, FlowDesigner only supports acyclic graphs, but feed-back loops
 can be made using the special 
\emph on 
Feedback
\emph default 
 node.
 Figure 
\begin_inset LatexCommand \ref{cap:overflow_feedback}

\end_inset 

 shows a FlowDesigner program that uses a 
\emph on 
Feedback
\emph default 
 node.
 At the beginning, the constant 
\begin_inset Quotes eld
\end_inset 

1
\begin_inset Quotes erd
\end_inset 

 is added to 
\begin_inset Quotes eld
\end_inset 

0
\begin_inset Quotes erd
\end_inset 

 and then, at every iteration, the result of the addition is added to the
 same constant 
\begin_inset Quotes eld
\end_inset 

1
\begin_inset Quotes erd
\end_inset 

.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_feedback.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

Feed-back Loop with FlowDesigner
\begin_inset LatexCommand \label{cap:overflow_feedback}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/demo_feedback.n .
\layout Subsubsection

Multi-threading
\layout Standard

It must first be noted that multi-threading in FlowDesigner is still an
 experimental feature and not all structures are fully MT-safe.
 FlowDesigner multi-threading is provided through three special nodes: 
\emph on 
SerialThread
\emph default 
, 
\emph on 
ParallelThread
\emph default 
 and 
\emph on 
ThreadJoin
\emph default 
.
\layout Subsubsection

SerialThread
\layout Standard

The 
\emph on 
SerialThread
\emph default 
 node provides pipeline-type multi-threading.
 A thread is started and computes inputs before they are needed by the output
 node.
\layout Subsubsection

ParallelThread
\layout Standard

The 
\emph on 
ParallelThread
\emph default 
 node provides parallelism-type multi-threading.
 When asked for an input, it computes both inputs at the same time and caches
 the other.
\layout Subsubsection

ThreadJoin
\layout Standard

The 
\emph on 
ThreadJoin
\emph default 
 node acts like a mutex and prevents two FlowDesigner threads from accessing
 the same (input) node at the same time.
\layout Standard

Figure 
\begin_inset LatexCommand \ref{cap:overflow_thread}

\end_inset 

 shows an example of FlowDesigner program that uses multi-threading.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_thread.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

Feed-back Loop with FlowDesigner
\begin_inset LatexCommand \label{cap:overflow_thread}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/mixedthread.n .
\layout Subsection

Category: Fuzzy
\layout Subsection

Category: HMM
\layout Subsection

Category: Matrix
\layout Standard

As the name mentions, this category is about matrix, that is, two dimensions
 vector.
 Figure 
\begin_inset LatexCommand \ref{cap:sample_matrix}

\end_inset 

 shows an example of FlowDesigner program that create matrix and use it
 with the node 
\emph on 
MProduct
\emph default 
.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename overflow_matrix.ps
	display color
	width 90col%
	rotateOrigin center

\end_inset 


\layout Caption

Matrix with FlowDesigner
\begin_inset LatexCommand \label{cap:sample_matrix}

\end_inset 


\end_inset 


\layout Standard

Note that you can try out this program by clicking on the 
\emph on 
open
\emph default 
 icon and select: 
\emph on 
FreeSpeech/examples/matrix.n .
\layout Subsection

Category: NNet
\layout Subsection

Category: Network
\layout Subsection

Category: RobotFlow
\layout Subsection

Category: VQ
\layout Chapter

Exceptions
\layout Section

Run-time Exceptions
\layout Standard

First, it is important to note that there are two types of exceptions that
 can happen.
 The first type, which we'll call run-time exceptions, is thrown (usually
 by a node) when an error happens during processing by FlowDesigner.
 Such type of exception can be thrown when a node receives an object of
 an unexpected type, but there can be many other causes.
 Run-time exceptions usually terminate the current FlowDesigner program
 with an error message indicating where the error happened.
 They are analogous to run-time errors in most interpreted languages.
 
\layout Standard

It is possible to prevent a run-time exception from stopping a program.
 This can be done with the Recover node, that catches all run-time exceptions.
\layout Section

User Exceptions
\layout Standard

The second type of exceptions, user exceptions, can be thrown and caught
 by a user program using the Throw and Catch nodes.
 They are serve the same function as the throw and catch statements in a
 C++ program.
\layout Chapter

Automatic Code Generation
\layout Standard

Is is now possible to generate C++ code from a FlowDesigner .n file.
 You can do that by clicking the "Build" button on the toolbar.
 Doing so brings up the code generation dialog (fig.
 
\begin_inset LatexCommand \ref{fig:codegen}

\end_inset 

).
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename codegen.ps
	display color
	width 60col%
	rotateOrigin center

\end_inset 


\layout Caption

Code generation dialog
\begin_inset LatexCommand \label{fig:codegen}

\end_inset 


\end_inset 


\layout Standard

The "Build function name" is the name given to the function that will return
 the network (
\family typewriter 
Network *
\family default 
) corresponding to the XML file.
 You will only care if you want to build a library or if you want multiple
 networks.
 The "Output file name" option specifies the name of the C++ file that builds
 the network.
 Of course, "Directory" specifies where to put all that.
 
\layout Standard

There are 3 code generation options: 
\layout Itemize

Generate main: Check that if you want to build an application (as opposed
 to a library) 
\layout Itemize

Static linkage: This will copy all the required FlowDesigner files in the
 same directory.
 This will allow to build an application/library without linking to FlowDesigner.
 Note that the FlowDesigner license (LGPL) still applies to the copied files.
 
\layout Itemize

Generate makefile: Unimplemented yet 
\layout Standard

Note: the FLOWDESIGNER_SOURCE environment variable must be set to your FlowDesig
ner source directory in order for the "static linkage" option to work.
\layout Chapter

Software Architecture
\layout Standard

This chapter explains the software architecture used for the FlowDesigner
 base library and the mechanisms used for blocks initialization.
\layout Section

FlowDesigner Internals
\layout Subsection

Nodes
\layout Standard

A node is the smallest processing unit in FlowDesigner.
 Once it has been initialized, the only method it understands is 
\family typewriter 
getOutput(int output_id, int count)
\family default 
.
 In other words, all you can do with it is to ask it for its output.
 One obvious consequence of that is that all node must have at least one
 output, but it can have more than one.
 A node can have any number of input, including zero (examples of node with
 no inputs are constants and random generators).
\layout Standard

If a node requires input data in order to perform some calculations, it
 will call 
\family typewriter 
getOutput(...)
\family default 
 on its input node(s).
 Computation is hence performed in a recursive manner until everything is
 calculated and the last node returns its output.
 The count argument to the 
\family typewriter 
getOutput(...)
\family default 
 method is used when loops are involved.
 It specifies the number of the iteration.
 Note that it is possible for a node to ask its inputs for a different count
 that the one received.
 It is even possible to ask for many different count values in a row.
\layout Standard

The Node class is an abstract class from which all types of nodes must derive
 (directly or indirectly).
 Information on how to derive new types of nodes is given in Extending FlowDesig
ner chapter 7.
 
\layout Subsection

Networks
\layout Standard

A network is a graph containing nodes that are linked together in order
 to perform some operation and/or return a result.
 Most of the time, the graph will be acyclic that is, it will not contain
 loops.
 It is now (as of march 2001) possible to have feedback loops using the
 FeedBack node, but this is a more advanced topic.
 One thing worth mentioning is that the Network class derives directly from
 the Node class.
 This means that any network can be used just as if it were a single Node.
 This makes it possible to include networks in other networks.
 The included network is often referred to as sub-network, or subnet.
\layout Standard

In order for a network to be valid, it must meet the following criteria
\layout Itemize

It must have at least one output 
\layout Itemize

Every node it contains must have a connection to at least one of its output
\layout Itemize

All node must have all their inputs connected
\layout Itemize

A toplevel network may not have inputs
\layout Itemize

There should be no loop (except by using a FeedBack node)
\layout Section

Class Diagrams
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Standard


\begin_inset Graphics
	filename classes.ps
	display color
	width 100col%
	rotateOrigin center

\end_inset 


\layout Caption

Main FlowDesigner classes
\end_inset 


\layout Section

Data Types
\layout List
\labelwidthstring 00.00.0000

stream: Fd (fd), fptr (FILE) or cpp (stream)
\layout List
\labelwidthstring 00.00.0000

vector: Series of object references.
 For instance: 
\begin_inset Quotes eld
\end_inset 

<Vector 1 2 3 4 5 6 7 8>
\begin_inset Quotes erd
\end_inset 

.
\layout List
\labelwidthstring 00.00.0000

matrix: Two dimensions vector.
\layout Chapter

Extending FlowDesigner
\layout Standard

FlowDesigner is designed to be extendible in many areas, so that it is possible
 to create new: node types, operators and data types.
\layout Section

Writing New Nodes
\layout Standard

Most of the new nodes will derive from either the Node abstract class or
 the BufferedNode abstract class.
 You should use public inheritance when deriving your new class.
 In all cases, you will need to define a constructor for your new node class.
 The parameters for this constructors are: 
\family typewriter 
(string nodeName, const ParameterSet &params)
\family default 
, which are used to initialize the base class, e.g.
\layout LyX-Code

class MyNode : public BufferedNode { 
\layout LyX-Code

public: 
\layout LyX-Code

   MyNode(nodeName, params) : BufferedNode(nodeName, params) 
\layout LyX-Code

   ...
 
\layout LyX-Code

};
\layout Standard

Also, if you derive from BufferedNode, you need to define the 
\family typewriter 
virtual void calculate(int output_id, int count, Buffer &out)
\family default 
 method.
 The arguments are the ID of the input requested (
\family typewriter 
output_id
\family default 
), the iteration ID (
\family typewriter 
count
\family default 
) and the output buffer for the requested output (
\family typewriter 
out
\family default 
).
 The 
\family typewriter 
calculate
\family default 
 method is expected to assign an object to 
\family typewriter 
out[count]
\family default 
.
\layout Standard

If you derive directly from the Node class, you will need to override the
 
\family typewriter 
ObjectRef getOutput(int output_id, int count)
\family default 
 method.
 The meaning of 
\family typewriter 
output_id
\family default 
 and 
\family typewriter 
count
\family default 
 is the same as for the BufferedNode equivalent, and the result should be
 returned as an ObjectRef.
\layout Standard

Here are some other methods you might want to define too:
\layout Itemize


\family typewriter 
void initialize()
\family default 
: As the name implies, it is meant to perform some initialization that cannot
 be done within the constructor.
 This method is called only once, starting the processing, but after all
 the 
\family typewriter 
request()
\family default 
 have been made.
 In most (all) cases 
\family typewriter 
initialize()
\family default 
 should start by calling the base class implementation (e.g.
 
\family typewriter 
BufferedNode::initialize()
\family default 
).
\layout Itemize


\family typewriter 
void reset()
\family default 
: This method should return the node to the same state it was after 
\family typewriter 
initialize()
\family default 
 was first called.
 In most (all) cases reset() should start by calling the base class implementati
on (e.g.
 
\family typewriter 
BufferedNode::reset()
\family default 
).
\layout Standard

In some rare cases, you will want to define the following method:
\layout Itemize


\family typewriter 
void request(int outputID, const ParameterSet &req)
\family default 
: This method is meant to pass on 
\emph on 
special requests
\emph default 
 to input nodes.
 For now, this is mainly used by the 
\emph on 
BufferedNode
\emph default 
 class to compute the size needed for the output buffers.
 Remember that if you override this method, you 
\series bold 
must
\series default 
 make sure that it propagates the request to 
\series bold 
all
\series default 
 its input nodes.
 Otherwise, the nodes that won't be reached will have incorrect buffer size.
\layout Standard

At last for a new node to be visible in 
\emph on 
flowdesigner
\emph default 
, a special header must be present.
 An example of this is:
\layout LyX-Code

class 
\family roman 
\shape italic 
MyNode
\family default 
\shape default 
;
\layout LyX-Code

DECLARE_NODE(
\family roman 
\shape italic 
MyNode
\family default 
\shape default 
)
\layout LyX-Code

/*Node
\layout LyX-Code

 *
\layout LyX-Code

 * @name 
\family roman 
\shape italic 
MyNode
\layout LyX-Code

 * @category 
\family roman 
\shape italic 
MyCategory:MySubCategory
\layout LyX-Code

 * @description 
\family roman 
\shape italic 
Some description of what MyNode does
\layout LyX-Code

 * 
\layout LyX-Code

 * @input_name 
\family roman 
\shape italic 
SOME_INPUT_NAME
\layout LyX-Code

 * @input_type 
\family roman 
\shape italic 
this_input_type
\layout LyX-Code

 * @input_description 
\family roman 
\shape italic 
Description of this input
\layout LyX-Code

 * 
\layout LyX-Code

 * @input_name 
\family roman 
\shape italic 
SOME_OTHER_INPUT
\layout LyX-Code

 * @input_type 
\family roman 
\shape italic 
that_input_type
\layout LyX-Code

 * @input_description 
\family roman 
\shape italic 
Description of that output
\layout LyX-Code

 * 
\layout LyX-Code

 * @output_name 
\family roman 
\shape italic 
SOME_OUTPUT
\layout LyX-Code

 * @output_type 
\family roman 
\shape italic 
this_output_type
\layout LyX-Code

 * @output_description 
\family roman 
\shape italic 
Description of the output
\layout LyX-Code

 * 
\layout LyX-Code

 * @parameter_name 
\family roman 
\shape italic 
SOME_PARAMETER
\layout LyX-Code

 * @parameter_type 
\family roman 
\shape italic 
this_parameter_type
\layout LyX-Code

 * @parameter_description 
\family roman 
\shape italic 
The description of the parameter
\layout LyX-Code

 * END*/
\layout Standard

Although this header is only a C++ comment, it is parsed by a PERL script
 to produce an XML description of each toolbox.
 The DECLARE_NODE(MyNode) macro is used to register the node in a dictionary
 when the toolbox is dynamically loaded.
 
\layout Section

Example: VAdd.cc
\layout Standard


\shape italic 
Most nodes must include BufferedNode.h.
 Also, since this node deals with vectors, we need Vector.h
\layout LyX-Code

#include "BufferedNode.h" 
\layout LyX-Code

#include "Vector.h"
\layout Standard


\shape italic 
forward declaration of class VAdd for use with the DECLARE_NODE macro
\layout LyX-Code

class VAdd;
\layout Standard


\shape italic 
Declaration of the node.
 This definition is transformed into XML data for the GUI, as well as documentat
ion for the node
\layout LyX-Code

DECLARE_NODE(VAdd) 
\layout LyX-Code

/*Node  
\layout LyX-Code

*  
\layout LyX-Code

* @name VAdd  
\layout LyX-Code

* @category DSP:Base  
\layout LyX-Code

* @description Adds two vectors of same length  
\layout LyX-Code

*  
\layout LyX-Code

* @input_name INPUT1  
\layout LyX-Code

* @input_type Vector<float>  
\layout LyX-Code

* @input_description First vector  
\layout LyX-Code

*  
\layout LyX-Code

* @input_name INPUT2  
\layout LyX-Code

* @input_type Vector<float>  
\layout LyX-Code

* @input_description Second vector  
\layout LyX-Code

*  
\layout LyX-Code

* @output_name OUTPUT  
\layout LyX-Code

* @output_type Vector<float>  
\layout LyX-Code

* @output_description Result vector  
\layout LyX-Code

* 
\layout LyX-Code

END*/
\layout Standard


\shape italic 
Class definition/implementation.
 Note that because we won't need to derive from this class, we don't need
 a header file (.h) and we can put everything in the .cc.
 Our node, like most other nodes, derives from BufferedNode.
\layout LyX-Code

class VAdd : public BufferedNode {
\layout LyX-Code

   int input1ID;
\layout LyX-Code

   int input2ID;
\layout LyX-Code

   int outputID;
\layout LyX-Code

public:
\layout LyX-Code

   VAdd(string nodeName, ParameterSet params)
\layout LyX-Code

   : BufferedNode(nodeName, params)
\layout LyX-Code

   {
\layout Standard


\shape italic 
In the constructor, we create both the inputs and outputs.
\layout LyX-Code

      input1ID = addInput("INPUT1");
\layout LyX-Code

      input2ID = addInput("INPUT2");
\layout LyX-Code

      outputID = addOutput("OUTPUT");
\layout LyX-Code

   }
\layout Standard


\shape italic 
This is the main method for the node, it is called from the BufferedNode
 class each time a result needs to be calculated.
\layout LyX-Code

   void calculate(int output_id, int count, Buffer &out)
\layout LyX-Code

   {
\layout Standard


\shape italic 
Get input data from previous node(s).
\layout LyX-Code

      ObjectRef input1Value = getInput(input1ID, count);
\layout LyX-Code

      ObjectRef input2Value = getInput(input2ID, count);
\layout Standard


\shape italic 
We cast the generic objects (received through ObjectRefs) into a reference
 to a Vector<float>.
 If the cast fails, an exception will automatically be thrown.
\layout LyX-Code

      
\layout LyX-Code

      const Vector<float> &in1 = object_cast<Vector<float> > (input1Value);
\layout LyX-Code

      const Vector<float> &in2 = object_cast<Vector<float> > (input2Value);
\layout LyX-Code

\layout Standard


\shape italic 
Check that the size of the two vectors match.
 Otherwise, throw an exception.
 Here __FILE__ and __LINE__ are pre-processor macros that will print the
 file and line where this exception was thrown.
\layout LyX-Code

      if (in1.size() != in2.size())
\layout LyX-Code

          throw new NodeException(this, 
\layout LyX-Code

                                  "Input vectors must be of same length",
\layout LyX-Code

                                   __FILE__, __LINE__);
\layout LyX-Code

      int inputLength = in1.size();
\layout Standard


\shape italic 
Allocate a new Vector<float> from the pool of free vectors (that's why we
 don't use new).
\layout LyX-Code

      Vector<float> = &output =
\layout LyX-Code

                      *Vector<float>::alloc(inputLength);
\layout Standard


\shape italic 
Put the new Vector<float> in the return buffer.
\layout LyX-Code

      out[count] = &output;
\layout Standard


\shape italic 
Compute the result of the sum.
\layout LyX-Code

      for (int i=0;i<inputLength;i++)
\layout LyX-Code

         output[i]=in1[i]+in2[i];
\layout LyX-Code

   }
\layout LyX-Code

}; 
\layout Section

Creating New Operators
\layout Subsection

Double Dispatched Operators
\layout Standard

It is possible to define binary operators that can act on different kinds
 of input.
 One example is the "add" operator, which can be used to add two ints, two
 floats, two vectors, or an int and a float, ...
 See data-flow/include/operators.h 
\layout Section

Adding New Data Type
\layout Standard

It is possible to define new types in FlowDesigner.
 In order to be used in new nodes, new types must derive from the Object
 base class.
 That the only absolute requirement.
 However, if you want the new type to integrate more closely with FlowDesigner,
 there are several things you can do:
\layout Itemize

Implement the void
\family typewriter 
 printOn(ostream &out) const 
\family default 
method.
 This method writes the object to the out stream.
\layout Itemize

Implement the void readFrom (istream &in).
\layout Itemize

Add the macro 
\family typewriter 
DECLARE_TYPE(
\family default 
\emph on 
MyType
\family typewriter 
\emph default 
)
\family default 
 to the C++ file where the object is implemented.
\layout Standard

There is a certain format which all Object must respect.
 The object should start with "<MyType" and end with ">" (without the quotes).
 Usually, every field will be inside < and > signs.
\layout Chapter
\start_of_appendix 
Compiling and Installing
\layout Section*

What you need
\layout Itemize

An ANSI C++ compiler 
\begin_deeper 
\layout Itemize

gcc 2.95.x is OK 
\layout Itemize

most of gcc 2.96 variants are OK 
\layout Itemize

gcc 3.0.x compiles, but there are run-time glitches
\layout Itemize

egcs 1.1.2 is untested (probably doesn't work) 
\layout Itemize

MSVC++ is completely broken, but it possible build a subset of FlowDesigner
 with it (see here
\begin_inset Quotes erd
\end_inset 

Compiling on Win32
\begin_inset Quotes erd
\end_inset 

) 
\layout Itemize

HP's aCC should work after some minor modifications
\end_deeper 
\layout Itemize

autoconf, automake, libtool (which require perl and m4)
\layout Itemize

GNU make
\layout Itemize

FFTW (now optional, but recommended) compiled with --enable-float 
\layout Itemize

gnome (including the development libraries and libxml)
\layout Itemize

pthreads (now part of libc in most Linux distributions)
\layout Section*

Compilation flags
\layout Standard

If you are using gcc, you can control optimization with the CFLAGS and CXXFLAGS
 environment variables.
 For use on a Pentium III or an Athlon XP, we suggest to set both CFLAGS
 and CXXFLAGS to: '-O3 -march=pentiumpro -D_ENABLE_SSE'.
 For T-bird Athlon, we suggest replacing -D_ENABLE_SSE by -D_ENABLE_3DNOW.
 This must be done 
\series bold 
before running configure
\series default 
.
 Also, note that the default flags used if CFLAGS and CXXFLAGS are not set
 are '-O2 -g'.
 
\series bold 
It is strongly recommended not to compile FlowDesigner with -g 
\series default 
unless you're really desperate, as the binaries might take up to 600 MB
 of disk space (instead of 6-10 MB otherwise) due to the C++ name mangling.
 
\layout Section*

Configure options
\layout Itemize

--with-libtool-ld=<c++ compiler> You need to specify this option if libtool
 tries to use ld to link the C++ libraries and executables.
 These need to be linked with the C++ compiler (e.g.
 g++) because of initializations that must be performed before the main()
 starts (On Linux you most likely don't need that).
\layout Itemize

--with-fftw-dir=<fftw path> If FFTW is not installed in a standard path,
 you will need to specify this option.
\layout Itemize

--disable-static This option is required.
 FlowDesigner does not work with static libraries (because it uses dlopen).
\layout Itemize

--disable-<package> Doesn't build a certain package (<package> is HMM, VQ,
 NNet, ...) 
\layout Section*

Compiling & Installing the software
\layout Standard

To compile, type:
\layout Standard

% ./configure --disable-static --prefix=<your install directory> 
\layout Standard

% make 
\layout Standard

% make install
\layout Standard

Notes:
\layout Itemize

As of version 0.5.1, it is now recommended to set the install prefix to /usr
 or /usr/local, unless you want to keep more than one version installed
 at the same time.
 
\layout Itemize

If you are using a CVS tarball, you need to use ./autogen.sh instead of ./configure
 
\layout Itemize

You might also need to set your LD_LIBRARY_PATH to <flowdesigner prefix>/lib
\layout Standard

You can now start the FlowDesigner environment by typing : 
\layout Standard

% flowdesigner (assuming <flowdesigner prefix>/bin is in your path)
\layout Section*

Compiling on Win32
\layout Standard

Some parts of FlowDesigner (sorry, no GUI yet!) have been ported to Win32
 (w/ MSVC++).
 Using the code generation feature (the "Build" button on the toolbar),
 it is now possible to compile a FlowDesigner application on Windows.
 Note that this has not been fully tested yet.
\layout Standard

One important thing to note with MSVC++ (version 6.0) is that it is a very
 buggy compiler, mostly when it comes to templates.
 For example, it does not support template partial specialization and it
 chokes on a lot of valid template code (static template member functions,
 pointer to template functions, ...).
 For this reasons some FlowDesigner features need to be switched off.
\layout Standard

So here are the settings you need for FlowDesigner.
 First, you need to turn on RTTI (which is not enabled by default).
 Also, I suggest you turn the warnings off.
 The preprocessor flags (define) you need to set are: BROKEN_TEMPLATES,
 HAVE_FLOAT_H, NO_HASH_MAP, STUPID_COMPLEX_KLUDGE and (if not already defined),
 WIN32.
 
\layout Chapter

Troubleshooting
\layout Subsection*

1) The binary distribution I downloaded crashes on startup
\layout Standard

There can be many causes of that.
 The most common is that you have a different libstdc++ than the one FlowDesigne
r was compiled with.
 Another cause could be that you have FFTW compiled without --enable-float,
 while FlowDesigner was linked with a float version of FFTW.
 FlowDesigner has no way to detect that so it crashes.
 In both cases, the best thing to do is to build FlowDesigner yourself.
\layout Subsection*

2) I compiled FlowDesigner myself and it crashes on startup
\layout Standard

The main cause for this is a bug/missing feature in libtool that prevents
 it from working correctly with C++ on some platforms.
 This happens mostly on non-Linux platforms though not always.
 If you suspect that's your problem, try running configure with the 
\family typewriter 
--libtool-ld=g++
\family default 
 option.
\layout Subsection*

3) FlowDesigner tells me it cannot find libflow.so
\layout Standard

This can happen if you compile FlowDesigner and then move the installation
 directory (It can sometimes happen for other reasons).
 You can set the LD_LIBRARY_PATH to <flowdesigner install dir>/lib.
 Note that if you moved the FlowDesigner directory, you'll also need to
 set FLOWDESIGNER_HOME.
\layout Subsection*

4) The 
\begin_inset Quotes eld
\end_inset 

New Node
\begin_inset Quotes erd
\end_inset 

 menu is empty
\layout Standard

You probably moved the FlowDesigner install directory, see 3).
 Another possibility is if you compiled with 
\family typewriter 
--enable-static
\family default 
 flag.
 Because FlowDesigner toolboxes are dynamically loaded, everything must
 be compiled as shared libraries (which is the default in configure).
\layout Subsection*

5) FlowDesigner doesn't compile on my box
\layout Standard

First, make sure you have the latest release version.
 If it doesn't work, you should try the CVS version.
 If it fails too, please contact us and we'll do our best to make FlowDesigner
 compile on your platforms.
\layout Subsection*

6) I downloaded a more recent version and it doesn't even compile
\layout Standard

This can be due to the fact that you installed an earlier version (0.5.0 and
 earlier) in a path like /usr or /usr/local.
 The problem is that the old FlowDesigner includes ended up somewhere like
 /usr/include so when you try compiling a newer version, g++ sees the old
 includes (because they are in the include path) instead of the new ones.
\layout Chapter

Node Documentation
\layout Standard

This documentation is generated automatically from the comments included
 in the FlowDesigner C++ source code.
\layout Standard


\begin_inset Include \input{nodes.tex}
preview false

\end_inset 


\the_end
